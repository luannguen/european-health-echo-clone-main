/**
 * Test file for DbConnectionService
 * Demonstrates how to use the database connection microservice
 */

// Import using ES modules syntax
import dbService from './lib/db-manager.js';

// Event listeners for monitoring connection status
dbService.on('connecting', () => console.log('üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu...'));
dbService.on('connected', () => console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!'));
dbService.on('error', (error) => console.log('‚ùå L·ªói k·∫øt n·ªëi:', error.message));
dbService.on('reconnecting', (attempt) => console.log(`üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i (l·∫ßn ${attempt})...`));
dbService.on('disconnected', () => console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi'));
dbService.on('health-check-failed', () => console.log('‚ö†Ô∏è Ki·ªÉm tra k·∫øt n·ªëi th·∫•t b·∫°i'));

/**
 * Example 1: Basic connection test
 */
async function testBasicConnection() {
  console.log('\n=== TEST 1: K·∫øt n·ªëi c∆° b·∫£n ===');
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi m√† kh√¥ng thi·∫øt l·∫≠p pool
    const testResult = await dbService.testConnection();
    console.log('K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi:', testResult);
    
    if (testResult.success) {
      // L·∫•y th√¥ng tin c∆° s·ªü d·ªØ li·ªáu
      await dbService.init();
      const dbInfo = await dbService.getDatabaseInfo();
      console.log('Th√¥ng tin c∆° s·ªü d·ªØ li·ªáu:', dbInfo);
    }
  } catch (error) {
    console.error('L·ªói trong qu√° tr√¨nh ki·ªÉm tra k·∫øt n·ªëi:', error.message);
  }
}

/**
 * Example 2: Execute some sample queries
 */
async function testQueries() {
  console.log('\n=== TEST 2: Th·ª±c thi c√°c truy v·∫•n ===');
  try {
    // ƒê·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi
    await dbService.getPool();
    
    // L·∫•y danh s√°ch 5 b·∫£ng ƒë·∫ßu ti√™n
    const tablesResult = await dbService.executeQuery(`
      SELECT TOP 5 
        TABLE_NAME, 
        TABLE_SCHEMA 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_TYPE = 'BASE TABLE'
      ORDER BY TABLE_NAME
    `);
    
    console.log('Danh s√°ch b·∫£ng:');
    console.table(tablesResult.recordset);
    
    // ƒê·∫øm s·ªë b·∫£ng
    const countResult = await dbService.executeQuery(`
      SELECT COUNT(*) AS TableCount 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_TYPE = 'BASE TABLE'
    `);
    
    console.log(`T·ªïng s·ªë b·∫£ng: ${countResult.recordset[0].TableCount}`);
    
    // V√≠ d·ª• truy v·∫•n v·ªõi tham s·ªë
    const paramQueryResult = await dbService.executeQuery(`
      SELECT TOP 3 * 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = @tableName
    `, { 
      tableName: tablesResult.recordset[0].TABLE_NAME 
    });
    
    console.log(`C√°c c·ªôt trong b·∫£ng ${tablesResult.recordset[0].TABLE_NAME}:`);
    console.table(paramQueryResult.recordset);
    
  } catch (error) {
    console.error('L·ªói trong qu√° tr√¨nh truy v·∫•n:', error.message);
  }
}

/**
 * Example 3: Transaction example
 */
async function testTransaction() {
  console.log('\n=== TEST 3: Giao d·ªãch (Transaction) ===');
  try {
    // V√≠ d·ª• transaction (gi·∫£ l·∫≠p, kh√¥ng th·ª±c thi c√°c l·ªánh INSERT/UPDATE th·∫≠t)
    const result = await dbService.executeTransaction(async (transaction) => {
      // T·∫°o request t·ª´ transaction
      const request = transaction.request();
      
      // Th·ª±c hi·ªán m·ªôt truy v·∫•n SELECT trong transaction
      const result = await request.query(`
        SELECT TOP 5 * 
        FROM INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_TYPE = 'BASE TABLE'
      `);
      
      console.log('Truy v·∫•n trong transaction th√†nh c√¥ng');
      return result;
    });
    
    console.log('Transaction ho√†n t·∫•t th√†nh c√¥ng');
    
  } catch (error) {
    console.error('L·ªói trong qu√° tr√¨nh th·ª±c thi transaction:', error.message);
  }
}

/**
 * Run all tests
 */
async function runTests() {
  try {
    await testBasicConnection();
    await testQueries();
    await testTransaction();
    
    // ƒê√≥ng k·∫øt n·ªëi khi ho√†n t·∫•t
    console.log('\n=== ƒê√≥ng k·∫øt n·ªëi ===');
    await dbService.close();
    
  } catch (error) {
    console.error('L·ªói khi ch·∫°y c√°c b√†i ki·ªÉm tra:', error);
    // ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi ngay c·∫£ khi c√≥ l·ªói
    await dbService.close();
  }
}

// Ch·∫°y t·∫•t c·∫£ c√°c b√†i ki·ªÉm tra
runTests();

/**
 * H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng DbConnectionService
 * 
 * 1. Import service (s·ª≠ d·ª•ng ES modules):
 *    import dbService from './lib/db-manager.js';
 * 
 * 2. K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu:
 *    await dbService.init(); // ho·∫∑c dbService.getPool();
 * 
 * 3. Th·ª±c thi truy v·∫•n:
 *    const result = await dbService.executeQuery('SELECT * FROM my_table WHERE id = @id', { id: 1 });
 * 
 * 4. Th·ª±c thi stored procedure:
 *    const result = await dbService.executeStoredProcedure('sp_get_data', { param1: 'value1' });
 * 
 * 5. Th·ª±c thi transaction:
 *    await dbService.executeTransaction(async (transaction) => {
 *      const request = transaction.request();
 *      await request.query('INSERT INTO my_table (name) VALUES (@name)', { name: 'test' });
 *      // Th√™m c√°c truy v·∫•n kh√°c trong c√πng transaction
 *    });
 * 
 * 6. Theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi:
 *    dbService.on('connected', () => console.log('K·∫øt n·ªëi th√†nh c√¥ng'));
 *    dbService.on('error', (error) => console.log('L·ªói k·∫øt n·ªëi:', error.message));
 * 
 * 7. ƒê√≥ng k·∫øt n·ªëi khi ho√†n t·∫•t:
 *    await dbService.close();
 */